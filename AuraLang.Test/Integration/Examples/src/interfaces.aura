mod main

import aura/io

fn main() {
	greeter_ := Greeter("Bob")
	greeter_.say_hi()

	f(greeter_)

	second_greeter := SecondGreeter("Bob")
	second_greeter.chit_chat("overcast")
}

// Interfaces are defined in Aura with the `interface` keyword followed by the interface's name, like so:
interface IGreeter {
	// An interface's body may only define function signatures
	fn say_hi()
	fn build_greeting() -> string
}

interface ISmallTalker {
	fn chit_chat(weather: string)
}

// Classes must explicitly implement an interface, like so:
class Greeter(name: string) : IGreeter {
	// The class must define a function matching each of the interface's function signatures. The class's
	// implementations of the interface's functions must be public.
	pub fn say_hi() {
		io.println(this.build_greeting())
	}

	pub fn build_greeting() -> string {
		return "Hi, " + this.name + "!"
	}
}

// A class can implement more than one interface. In that case, the implemented interfaces should be separated by a comma
class SecondGreeter(name: string) : IGreeter, ISmallTalker {
	pub fn say_hi() {
		io.println(this.build_greeting())
	}

	pub fn build_greeting() -> string {
		return "Hello!"
	}

	pub fn chit_chat(weather: string) {
		io.println("How about this " + weather + " weather, huh?")
	}
}

// Functions can accept parameters whose type is an interface. In this case, any class that implements the
// interface can be passed in as an argument when calling this function.
fn f(g: IGreeter) {
	g.say_hi()
}
